scalar Date

type Lideres {
  documento: String!
  nombre: String!
}
type inscripciones {
  documento: String!
  nombre: String
  estado_inscripcion: String
  fecha_ingreso: Date
  fecha_egreso: Date
}
type avances {
  documento: String!
  fecha_avances: Date!
  descripcion: String!
  observaciones: String
}
type Proyecto {
  _id: ID!
  nombre_proyecto: String!
  objetivos_generales: String!
  objetivos_especificos: String!
  presupuesto: Int!
  fecha_inicio: Date!
  fecha_fin: Date!
  lideres: [Lideres]
  inscripciones: [inscripciones]
  avances: [avances]
  estado_proyecto: String!
  fase_proyecto: String
}

type Query {
  "Devuelve todos los Proyecto"
  getProyectos: [Proyecto]

  "Devuelve un Proyecto"
  getProyecto(id: ID!): Proyecto

  "Devuelve todos los usuarios"
  getUsuarios: [Usuario]

  "Devuelve un Usuario"
  getUsuario(id: ID!): Usuario
}

input ProyectoLideres {
  documento: String!
  nombre: String!
}
input ProyectoInscripciones {
  documento: String!
  nombre: String!
  estado_inscripcion: String!
  fecha_ingreso: Date
  fecha_egreso: Date
}
input ProyectoAvances {
  documento: String!
  fecha_avances: Date!
  descripcion: String!
  observaciones: String
}
input ProyectoInput {
  nombre_proyecto: String!
  objetivos_generales: String!
  objetivos_especificos: String!
  presupuesto: Int!
  fecha_inicio: Date!
  fecha_fin: Date!
  lideres: [ProyectoLideres]
  inscripciones: [ProyectoInscripciones]
  avances: [ProyectoAvances]
  estado_proyecto: String!
  fase_proyecto: String
}

input ProyectoEditLideres {
  documento: String
  nombre: String
}
input ProyectoEditInscripciones {
  documento: String
  nombre: String
  estado_inscripcion: String
  fecha_ingreso: Date
  fecha_egreso: Date
}
input ProyectoEditAvances {
  documento: String
  fecha_avances: Date
  descripcion: String
  observaciones: String
}
input ProyectoEditInput {
  nombre_proyecto: String
  objetivos_generales: String
  objetivos_especificos: String
  presupuesto: Int
  fecha_inicio: Date
  fecha_fin: Date
  estado_proyecto: String
  fase_proyecto: String
}

input ProyectoAddLider {
  documento: String!
  nombre: String!
}
input ProyectoAddInscripciones {
  documento: String!
  nombre: String!
  estado_inscripcion: String!
  fecha_ingreso: Date!
  fecha_egreso: Date
}
input ProyectoAddAvances {
  documento: String!
  fecha_avances: Date!
  descripcion: String!
  observaciones: String
}

type Mutation {
  "Crea un Proyecto"
  createProyecto(input: ProyectoInput!): Proyecto
  "Edita un proyecto"
  editProyecto(_id: ID!, input: ProyectoEditInput): Proyecto
  "Elimina un proyecto"
  removeProyecto(_id: ID!): [Proyecto]
  "Agrega lider a un proyecto"
  addLider(proyectoId: ID!, input: ProyectoAddLider): Proyecto
  "Agrega estudiante a un proyecto"
  addEstuadiante(
    proyectoId: ID!
    usuarioId: ID!
    input: ProyectoAddInscripciones
  ): Proyecto
  "Agrega avances a un proyecto"
  addAvance(
    proyectoId: ID!
    documento: String!
    input: ProyectoAddAvances
  ): Proyecto
  "Actualiza una inscripcion de un proyecto"
  editInscripcion(
    proyectoId: ID!
    documento: String
    input: ProyectoEditInscripciones
  ): Proyecto
  "Edita un avance de un proyecto"
  editAvance(
    proyectoId: ID!
    documento: String!
    input: ProyectoEditAvances
  ): Proyecto
  "Edita lider de un proyecto"
  editLider(
    proyectoId: ID!
    documento: String!
    input: ProyectoEditLideres
  ): Proyecto
  "Crea un usuario"
  createUsuario(input: AddUsuario!): Usuario
  "Edita un usuario"
  editUsuario(_id: ID!, input: UsuarioEditInput): Usuario
  "Elimina un usuario por su ID"
  deleteUsuario(_id: ID!): Boolean
}

type Usuario {
  _id: ID!
  nombre: String!
  identificacion: String
  email: String!
  estado: String
  password: String!
  rol: String
}

input AddUsuario {
  nombre: String!
  identificacion: String
  email: String!
  estado: String
  password: String!
  rol: String
}

input UsuarioEditInput {
  nombre: String
  identificacion: String
  email: String
  estado: String
  password: String
  rol: String
}
